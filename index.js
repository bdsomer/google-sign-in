/*
 * Copyright 2017 Bennett Somerville
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

const https = require('https'),
zlib = require('zlib');

/**
 * A project with a set of client IDs.
 */
class Project {
	/**
	 * Creates a Google sign in project.
	 * @param {string[]} clientIds A list of valid client IDs.
	 */
	constructor(...clientIds) {
		this.clientIds = clientIds;
	}

	/**
	 * Verifies a token generated by the client.
	 * @param {string} idToken The token to verify.
	 * @return {Promise<object>} A promise that resolves with the JSON returned by the API (see https://developers.google.com/identity/sign-in/web/backend-auth#calling-the-tokeninfo-endpoint) if the token is valid and rejects if it is invalid or if an error occured. 'aud' and 'exp' claims are automatically verified.
	 */
	verifyToken(idToken) {

		// Declare the promise to return

		const promise = new Promise((resolve, reject) => {

			// Construct a get request

			https.get({
				'hostname' : 'www.googleapis.com',
				'path' : '/oauth2/v3/tokeninfo?id_token=' + idToken,
				'headers' : {
					'Accept' : 'application/json',
					'Accept-Encoding' : 'gzip, deflate'
				}
			}, (res) => { // Callback function

				// Create a function to return the new data

				const returnData = (err, newData) => {
					
					// Check for an error

					if (err) {
						reject(err);
					} else {

						// Try - catch for a parse error

						try {

							// Parse data

							const jsonData = JSON.parse(newData);

							// Check for errors

							if (jsonData.hasOwnProperty('error_description')) { // Check for an error returned by Gogle
								reject(new Error(jsonData.error_description));
							} else if (this.clientIds.indexOf(jsonData.aud) === -1) { // Verify that the token is for the correct project
								reject(new Error('The \'aud\' claim does not match a client ID.'));
							} else if (new Date(jsonData.exp) < new Date()) { // Verify that the token is not expired
								reject(new Error('The \'exp\' claim has expired.'));
							} else { // Resolve with data if all goes well
								resolve(jsonData);
							}
						} catch (parseError) {
							reject(parseError);
						}
					}
				};

				// Check the copression method used

				const compressionMethod = res.headers['content-encoding'];

				// Create a stream

				var stream = res;
				if (compressionMethod === 'gzip') {
					stream = res.pipe(zlib.createGunzip());
				} else if (compressionMethod === 'deflate') {
					stream = res.pipe(zlib.createDeflate());
				}

				// Gather the data, parse, and return

				var data = new Buffer([]);
				stream.on('data', (chunk) => {
					data = Buffer.concat([data, chunk]);
				});
				stream.on('end', () => {
					returnData(null, data);
				});
			}).on('error', (error) => {
				reject(error); // Reject in case of request error
			});
		});

		return promise; // Return the promise
	}
}

module.exports = { Project };